const config = require('../config');
const moment = require('moment-timezone');
const { cmd, commands } = require('../command');
const { runtime } = require('../lib/functions');
const os = require('os');
const { getPrefix } = require('../lib/prefix');

// Fonction pour styliser les majuscules comme  ú…™
function toUpperStylized(str) {
  const stylized = {
    A: '·¥Ä', B: ' ô', C: '·¥Ñ', D: '·¥Ö', E: '·¥á', F: '“ì', G: '…¢', H: ' ú',
    I: '…™', J: '·¥ä', K: '·¥ã', L: ' ü', M: '·¥ç', N: '…¥', O: '·¥è', P: '·¥ò',
    Q: '«´', R: ' Ä', S: 's', T: '·¥õ', U: '·¥ú', V: '·¥†', W: '·¥°', X: 'x',
    Y: ' è', Z: '·¥¢'
  };
  return str.split('').map(c => stylized[c.toUpperCase()] || c).join('');
}

// Normalisation des cat√©gories
const normalize = (str) => str.toLowerCase().replace(/\s+menu$/, '').trim();

// Emojis par cat√©gorie normalis√©e
const emojiByCategory = {
  ai: 'ü§ñ',
  anime: 'üç•',
  audio: 'üéß',
  bible: 'üìñ',
  download: '‚¨áÔ∏è',
  downloader: 'üì•',
  fun: 'üéÆ',
  game: 'üïπÔ∏è',
  group: 'üë•',
  img_edit: 'üñåÔ∏è',
  info: '‚ÑπÔ∏è',
  information: 'üß†',
  logo: 'üñºÔ∏è',
  main: 'üè†',
  media: 'üéûÔ∏è',
  menu: 'üìú',
  misc: 'üì¶',
  music: 'üéµ',
  other: 'üìÅ',
  owner: 'üëë',
  privacy: 'üîí',
  search: 'üîé',
  settings: '‚öôÔ∏è',
  sticker: 'üåü',
  tools: 'üõ†Ô∏è',
  user: 'üë§',
  utilities: 'üß∞',
  utility: 'üßÆ',
  wallpapers: 'üñºÔ∏è',
  whatsapp: 'üì±',
};

cmd({
  pattern: 'men',
  alias: ['allmenu'],
  desc: 'Show all bot commands',
  category: 'menu',
  react: 'üëå',
  filename: __filename
}, async (conn, mek, m, { from, sender, reply }) => {
  try {
    const prefix = getPrefix();
    const timezone = config.TIMEZONE || 'Africa/Nairobi';
    const time = moment().tz(timezone).format('HH:mm:ss');
    const date = moment().tz(timezone).format('dddd, DD MMMM YYYY');

    const uptime = () => {
      let sec = process.uptime();
      let h = Math.floor(sec / 3600);
      let m = Math.floor((sec % 3600) / 60);
      let s = Math.floor(sec % 60);
      return `${h}h ${m}m ${s}s`;
    };

    let menu = `
*‚îè‚îÄ‚îÄ‚îÄ‚îÄ„Äò ·¥ç·¥á Ä·¥Ñ·¥á·¥Ö·¥ás „Äô‚îÄ‚îÄ‚îÄ‚ä∑*
*‚îÉ ·¥úÍú±·¥á Ä : @${sender.split("@")[0]}*
*‚îÉ  Ä·¥ú…¥·¥õ…™·¥ç·¥á : ${uptime()}*
*‚îÉ ·¥ç·¥è·¥Ö·¥á : ${config.MODE}*
*‚îÉ ·¥ò Ä·¥á“ì…™x : „Äå ${config.PREFIX}„Äç* 
*‚îÉ ·¥è·¥°…¥·¥á Ä : ${config.OWNER_NAME}*
*‚îÉ ·¥ò ü·¥ú…¢…™…¥Íú± : „Äé ${commands.length} „Äè*
*‚îÉ ·¥Ö·¥á·¥† : ·¥ç·¥Ä Ä…™s·¥á ü*
*‚îÉ ·¥†·¥á ÄÍú±…™·¥è…¥ : 2.0.0*
*‚îó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*`;

    // Group commands by category (improved logic)
    const categories = {};
    for (const cmd of commands) {
      if (cmd.category && !cmd.dontAdd && cmd.pattern) {
        const normalizedCategory = normalize(cmd.category);
        categories[normalizedCategory] = categories[normalizedCategory] || [];
        categories[normalizedCategory].push(cmd.pattern.split('|')[0]);
      }
    }

    // Add sorted categories with stylized text
    for (const cat of Object.keys(categories).sort()) {
      const emoji = emojiByCategory[cat] || 'üí´';
      menu += `\n\n*‚îè‚îÄ„Äé ${emoji} ${toUpperStylized(cat)} ${toUpperStylized('Menu')} „Äè‚îÄ‚îÄ‚ä∑*\n`;
      for (const cmd of categories[cat].sort()) {
        menu += `*‚îÇ ${prefix}${cmd}*\n`;
      }
      menu += `*‚îó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*`;
    }

    menu += `\n\n> ${config.DESCRIPTION || toUpperStylized('Explore the bot commands!')}`;

    // Context info for image message
    const imageContextInfo = {
      mentionedJid: [sender],
      forwardingScore: 999,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
        newsletterJid: config.NEWSLETTER_JID || '120363299029326322@newsletter',
        newsletterName: config.OWNER_NAME || toUpperStylized('marisel'),
        serverMessageId: 143
      }
    };

    // Send menu image
    await conn.sendMessage(
      from,
      {
        image: { url: config.MENU_IMAGE_URL || 'https://url.bwmxmd.online/Adams.zjrmnw18.jpeg' },
        caption: menu,
        contextInfo: imageContextInfo
      },
      { quoted: mek }
    );

    // Send audio if configured
    if (config.MENU_AUDIO_URL) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      await conn.sendMessage(
        from,
        {
          audio: { url: config.MENU_AUDIO_URL },
          mimetype: 'audio/mp4',
          ptt: true,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterName: config.OWNER_NAME || toUpperStylized('marisel'),
              serverMessageId: 143
            }
          }
        },
        { quoted: mek }
      );
    }

  } catch (e) {
    console.error('Menu Error:', e.message);
    await reply(`‚ùå ${toUpperStylized('Error')}: Failed to show menu. Try again.\n${toUpperStylized('Details')}: ${e.message}`);
  }
});
